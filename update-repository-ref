#!/bin/bash
tool_name=$1
repository=$2
ref=$3

if [ -z "${tool_name}" ] || [ -z "${repository}" ] || [ -z "${ref}" ];
then
  echo "$0 <tool user> <repository url> <ref>"
  exit 1
fi

tools=""
if [ "${tool_name}" == "*" ]
then
  for tool in *.yaml;
  do
    tools="${tools} $(sed 's/\.yaml$//' <<< "${tool}")"
  done
else
  if [ -f "${tool_name}.yaml" ]
  then
    tools="${tools} ${tool_name}"
  fi
fi

if [ -z "${tools}" ];
then
  echo "No tools found not found for '${tool_name}'"
  exit 1
fi

echo "Resolved '${tool_name}' into ${tools}"
for tool in ${tools};
do

  # Find all components matching the specified repository
  components=$(yq '.components | . as $data | keys[] | select($data[.].build.repository == "'${repository}'") | .' < ${tool}.yaml)

  if [ -z "${components}" ];
  then
    # If we specified an explicit tool, then abort on no components
    if [ "${tool_name}" != "*" ];
    then
      echo "No components not found in ${tool}"
      exit 1
    fi

    # Otherwise, just ignore a tool with no components matching this repo
    continue
  fi

  # Use `update-ref` to do the (per component) updating
  for component in ${components};
  do
    ./update-ref "${tool}" "${component}" "${ref}"
  done
done
